#!/usr/bin/env python
# -*- coding: utf-8 -*-

Import('env')

from util import match_patterns, minifiables, filter_files
from fnmatch import fnmatch
from os.path import basename
from filesystem import walk_dir


SRC_DIR = './'
DEST_DIR = '../' + env['MEDIA_DEST_DIR'] + '/'

LOADER_SCRIPT = SRC_DIR + "script/lib/chickoojs/src/loader.js"
DEFAULT_MEDIA_URL = "{{ TEXT_MEDIA_URL }}"
JS_MINIFIED = "-min"

SCRIPT_FILES = Split("""
    script/lib/chickoojs/src/jquery/jquery-1.3.2.js
    script/lib/chickoojs/src/jquery/jquery-1.4a1.min.js
    script/lib/chickoojs/src/jquery/jquery-1.4.min.js
""")

IMAGE_FILES = Split("""
    image/icon/favicon.png
    image/bg/water.jpg
    image/bg/footer-shadow.png
    image/photo/ravi_sheth.jpg
    image/photo/shesh.jpg
    image/photo/alok_mahajan.jpg
    image/photo/p_r_naware.jpg
    
    image/icon/128x128/globe.png
    image/icon/128x128/cheetah.png
    image/icon/128x128/safety-box.png
    image/icon/128x128/iphone.png
    image/icon/128x128/legal.png
    image/icon/128x128/pie-chart-green.png
    image/icon/128x128/pie-chart-red.png
    image/icon/128x128/news.png
    image/icon/128x128/onshore-professional.png
    image/icon/128x128/fleet.png
    image/icon/128x128/mail.png
    
    image/icon/24x24/search.gif
    image/icon/16x16/magnifying-glass.png
    
    image/icon/48x48/flag/india.png
    image/icon/48x48/flag/singapore.png
    image/icon/48x48/flag/mauritius.png
    
    image/bg/button_overlay.png
    image/bg/textfield_normal.png
    image/bg/textfield_readonly.png
    
    image/slickmap/L1-center.png
    image/slickmap/L1-left.png
    image/slickmap/L1-right.png
    image/slickmap/L3-bottom.png
    image/slickmap/L3-center.png
    image/slickmap/L3-li-top.png
    image/slickmap/L3-ul-top.png
    image/slickmap/vertical-line.png
    image/slickmap/white-highlight.png
    
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/back_disabled.jpg
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/back_enabled.jpg
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/forward_disabled.jpg
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/forward_enabled.jpg
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/sort_asc.jpg
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/sort_asc_disabled.jpg
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/sort_both.jpg
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/sort_desc.jpg
    script/lib/chickoojs/src/jquery/dataTables/1.6/media/images/sort_desc_disabled.jpg
    
    
    image/icon/128x128/qhse.png
    image/icon/128x128/drilling.png
    image/icon/128x128/fleet.png
    image/icon/128x128/construction.png
    image/icon/128x128/logistics.png
    
""")

CSS_FILES = Split("""
    css/ie6.css
    css/screen.css
""")

# Do not include IMAGE files in here.
# Please include them in IMAGE_FILES above.
# If you would like images to be copied "as is" without
# any optimizations, then you may include them here.
PLAIN_COPIES = SCRIPT_FILES + CSS_FILES + Split("""
    robots.txt
""")

PLAIN_COPY_DIRECTORIES = Split("""

""")


STITCHED_IMAGES = (
    dict(
        target='image/icon/nav.png',
        sources=Split("""
            image/logo/logo.png
            image/logo/en_US/text.png
            image/icon/nav/home.png
            image/icon/nav/fleet.png
            image/icon/nav/construction.png
            image/icon/nav/logistics.png
            image/icon/nav/drilling.png
            image/icon/nav/qhse.png
            image/icon/nav/contact.png
            image/icon/we-are-hiring.png
        """),
        orientation='horizontal',
        ),
    dict(
        target='image/icon/landing_icons.png',
        sources=Split("""
            image/icon/128x128/qhse.png
            image/icon/128x128/drilling.png
            image/icon/128x128/fleet.png
            image/icon/128x128/construction.png
            image/icon/128x128/logistics.png
        """),
        orientation='horizontal',
        ),
        

        
)


COMMON_SCRIPTS = """
    script/base.js
"""

SCRIPT_BUNDLES = (
    dict(
        selector="index.js",
        sources = Split(
        COMMON_SCRIPTS + 
        """
            script/index.js
        """)
    ),
    dict(
        selector="financial.js",
        sources = Split(
        COMMON_SCRIPTS + 
        """
            script/lib/jquery.gchart/jquery.gchart.js
            script/financial.js
        """)
    ),
    dict(
        selector="fleet.js",
        sources = Split(
        COMMON_SCRIPTS + 
        """
            script/lib/chickoojs/src/quicksilver.js
            script/lib/chickoojs/src/jquery/defer/jquery.defer.js
            script/lib/chickoojs/src/jquery/liveFilter/jquery.liveFilter.js
            script/fleet.js
        """)
    ),
    
    
)

CSS_BUNDLES = (
    dict(
        target="css/screen-all.css",
        sources = Split("""
            css/screen.css
        """)
    ),
)



# Recursively add all the files in the directories to files to copy.
for directory in set(PLAIN_COPY_DIRECTORIES):
    files = [f[len(SRC_DIR):] for f in walk_dir(SRC_DIR + directory)]
    PLAIN_COPIES.extend(files)

# Plain copies.
for f in set(PLAIN_COPIES):
    env.Command(DEST_DIR + f, SRC_DIR + f, Copy("$TARGET", "$SOURCE"))


# Optimize graphics
for f in IMAGE_FILES:
    filename = str(f)
    if match_patterns(filename, patterns=['*.png']):
        env.OptimizePNG(DEST_DIR + f, SRC_DIR + f)
    elif match_patterns(filename, patterns=['*.jpg', '*.jpeg']):
        env.OptimizeJPEG(DEST_DIR + f, SRC_DIR + f)
    else:
        env.Command(DEST_DIR + f, SRC_DIR + f, Copy("$TARGET", "$SOURCE"))


# Stitching graphics together
for stitch in STITCHED_IMAGES:
    func = env.HStitchImages if stitch.get('orientation', 'horizontal') == 'horizontal' else env.VStitchImages
    func(DEST_DIR + stitch['target'], [SRC_DIR + f for f in stitch['sources']])

# Minification of the generated CSS and JS files.
MINIFIABLE_FILES = SCRIPT_FILES + CSS_FILES + Split("""

""")

# Exclude these files specifically from minification.
NON_MINIFIABLE_FILES = Split("""

""")


# Don't minify all files in one command.  Minify them separately.
# It keeps build times small.
for f in minifiables(MINIFIABLE_FILES, NON_MINIFIABLE_FILES):
    filepath = DEST_DIR + str(f)
    env.YuiCompressorMinify(filepath)
    #if fnmatch(basename(filepath), '*.js'):
    #    env.JsminMinify(filepath)

def generate_perfectly_cacheable_scripts(sources, selector, media_url, page_dir, dest_dir, loader_script, minified):
    import os
    import errno
    import hashlib
    try:
        from cStringIO import StringIO
    except ImportError:
        from StringIO import StringIO
        
    def mkdir_p(path):
        try:
            os.makedirs(path)
        except OSError, exc:
            if exc.errno == errno.EEXIST:
                pass
            else: raise
    
    string_file = StringIO()
    chunk_size = 2048
    hash_service = hashlib.sha1()
    
    for filepath in sources:
        try:
            file_handle = open(filepath, 'rb')
            bytes_read = True
            while bytes_read:
                chunk = file_handle.read(chunk_size)
                bytes_read = len(chunk)
                string_file.write(chunk)
                hash_service.update(chunk)
        except IOError, message:
            print "Error: could not open file `%s' for reading -- permission denied or input/output error" % (filepath,)    
    file_digest = hash_service.hexdigest()
    mkdir_p(dest_dir)
    output_filename = dest_dir + file_digest + ".js"
    if not os.path.exists(output_filename):
        try:
            f = open(output_filename, 'w')
            f.write(string_file.getvalue())
            f.close()
            string_file.close()
        except IOError, message:
            print message
            print "Error: could not open file `%s' for writing -- permission denied or input/output error" % (output_filename,)    
    
    selector_script_contents = """var js = {'all': '%(media_url)s%(page_dir)s%(digest)s%(minified)s.js'};
        window.__hc_scripts.push(js['all']);getScripts(window.__hc_scripts);%(loader_script)s
        """.strip()
        
    selector_script_contents = selector_script_contents % dict(
        digest=file_digest,
        loader_script=open(loader_script, 'r').read(),
        page_dir=page_dir,
        media_url=media_url,
        minified=minified)
    
    selector_script_contents = selector_script_contents.strip()
    
    f = open(selector, 'wb')
    f.write(selector_script_contents)
    f.close()
    
    return output_filename

# Page based resource bundles.
for bundle in SCRIPT_BUNDLES:
    #env.YuiCompressorMinify(env.Concatenate([DEST_DIR + bundle['target']], 
    #    [SRC_DIR + f for f in bundle['sources']]))
    #env.Concatenate([DEST_DIR + bundle['target']])
    
    page_dir = bundle.get("page_dir", "script/page/")
    dest_dir = DEST_DIR + page_dir
    selector = dest_dir + bundle["selector"]    
    output_filename = generate_perfectly_cacheable_scripts(
        sources=[SRC_DIR + f for f in bundle['sources']],
        selector=selector,
        media_url=DEFAULT_MEDIA_URL,
        page_dir=page_dir,
        dest_dir=dest_dir,
        loader_script=LOADER_SCRIPT,
        minified=JS_MINIFIED)
    
    env.YuiCompressorMinify(selector)
    env.YuiCompressorMinify(output_filename)
    
# Page based resource bundles.
for bundle in CSS_BUNDLES:
    env.YuiCompressorMinify(env.Concatenate([DEST_DIR + bundle['target']], 
        [SRC_DIR + f for f in bundle['sources']]))


